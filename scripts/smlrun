#!/bin/bash

# Run a program defined as an .mlb file using the SML/NJ repl

set -e

if echo | sml | grep -q Jersey ; then :
else
    echo "*** Error: SML/NJ binary 'sml' not in path" 1>&2
    exit 1
fi

arg="$1"

if [ -z "$arg" ]; then
    echo "Usage: $0 file.sml" 1>&2
    echo "       $0 file.mlb" 1>&2
    exit 1
fi

set -u

mydir=$(dirname "$0")
. "$mydir/include.sh"

out=$(get_outfile "$arg")

tmpout="/tmp/out.$out.$$.sml"
trap "rm -f ${tmpout}" 0

expand_arg "$arg" | \
    sed 's/^\(.*\)$/use "\1";/' |              # wrap filenames in REPL use calls
    (
	cat <<EOF
val smlrun__cp = 
    let val x = !Control.Print.out in
        Control.Print.out := { say = fn _ => (), flush = fn () => () };
        x
    end;
val smlrun__prev = ref "";
Control.Print.out := { 
    say = fn s => 
        (if String.isSubstring "Error" s 
         then (Control.Print.out := smlrun__cp;
               (#say smlrun__cp) (!smlrun__prev);
               (#say smlrun__cp) s)
         else (smlrun__prev := s; ())),
    flush = fn s => ()
};
EOF
	cat -
	cat <<EOF

val _ = main ();
val _ = OS.Process.exit (OS.Process.success);
EOF
    ) > "$tmpout"

CM_VERBOSE=false sml "$tmpout" "$@"


